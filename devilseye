#!/usr/bin/env python3

import json
import logging
import random
import requests
import argparse
from pprint import pprint
from datetime import datetime
from resources.headers import user_agents
from assets.colors import red, white, green, reset


class thedevilseye:
	def __init__(self,args):
		self.api = f"https://darksearch.io/api/search?query={args.query}&page={int(args.page)}"
		self.headers = {"User-Agent": f"{random.choice(user_agents)}"}
		self.response = requests.get(self.api, headers=self.headers).json()
		
	def on_connection(self):
		count=0
		for result in self.response["data"]:
			count+=1
			results = f"""
{red}{args.query}{white}
├ total results: {red}{self.response['total']}{white}
└╼ result number: {red}{count}{white}

{result['title']}
├ .onion url: {red}{result['link']}{white}
└╼ description: {red}{result['description']}{white}{reset}\n"""
			
			if args.raw:
				pprint(self.response)
			else:
				print(results)
			
			if args.output:
				self.output(results)
			
		page = input(f"\n{white}* Next page ({green}1-{self.response['total']}{white}) ->>  ")
		args.page = page
	
	# Write output to a specified file		
	def output(self,results):
		if args.raw:
			object = json.dumps(self.response, indent=4)
			with open(args.output, "a") as raw:
				raw.write(object)
				raw.close()
				
		else:
			with open(args.output, "a") as file:
				file.write(results)
				file.close()
		if args.verbose:
			print(f"\n{white}* Output written to ./{green}{args.output}{reset}")

			
		
if __name__=="__main__":
	parser = argparse.ArgumentParser(description=f"{red}The Devil's Eye:{white} is a  darkweb OSINT tool, that extracts information (.onion links, descriptions) from the darkweb without requiring a Tor network.  developed by {green}Richard Mwewa {white}| https://github.com/{red}rlyonheart{reset}")
	parser.add_argument("query", help=f"{white}search query. {red}Note{white}: if search query contains spaces, put it inside quote ('') symbols{reset}")
	parser.add_argument("-p","--page",help=f"{white}page number ({red}default is 1{white}){reset}", metavar=f"{white}NUMBER{reset}", dest="page", default=1)
	parser.add_argument("-r", "--raw", help=f"{white}return output in raw {red}json{white} format{reset}", dest="raw", action="store_true")
	parser.add_argument("-o", "--output", help=f"{white}write output to a specified {red}file{reset}", metavar=f"{white}FILENAME{reset}", dest="output")
	parser.add_argument("-v", "--verbose", help=f"{white}run thelordseye in {red}verbose{white} mode{reset}", dest="verbose", action="store_true")
	args = parser.parse_args()
	start = datetime.now()
	if args.verbose:
		logging.basicConfig(format=f"{white}* %(message)s{reset}",level=logging.DEBUG)

	while True:
		try:
			thedevilseye(args).on_connection()
			
		except KeyboardInterrupt:
			if args.verbose:
				print(f"\n{white}* Process interrupted with {red}Ctrl{white}+{red}C{reset}")
				exit(f"{white}* Stopped in {red}{datetime.now()-start} {white}seconds.{reset}\n")	
			break
		
		except Exception as e:
			if args.verbose:
				print(f"{white}* Error: {red}{e}{reset}")
				print(f"{white}* Retrying...{reset}")
