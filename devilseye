#!/usr/bin/env python3

import random
import requests
import logging
import argparse
from assets.colors import red, white, green, reset
from assets.banner import banner
from resources.headers import user_agents


class TDsE:
	def __init__(self,args):
		self.base = f"https://darksearch.io/api/search?query={args.query}&page={int(args.page)}"
		self.headers = {"User-Agent": f"{random.choice(user_agents)}"}
		self.response = requests.get(self.base, headers=self.headers).json()
		
	def on_connection(self):
		count=0
		for result in self.response["data"]:
			count+=1
			results = f"""\n{white}
{red}{args.query}{white}
├ Total Results: {red}{self.response['total']}{white}
└╼ Result Number: {red}{count}{white}

{result['title']}
├ Link: {red}{result['link']}{white}
└╼ Description: {red}{result['description']}{white}{reset}\n"""
			if args.outfile:
				self.output(results)
			print(results)
			
	def output(self,results):
		with open(args.outfile, "a") as file:
			file.write(results)
			file.close()
			
		
if __name__=="__main__":
	parser = argparse.ArgumentParser(description=f"{white}The Devil's Eye:{red} Darkweb OSINT tool developed by {white}rly0nheart || {red}https://github.com/{white}rlyonheart{reset}")
	parser.add_argument("query", help="search query")
	parser.add_argument("-p","--page",help="page number", metavar="PAGE NUMBER", dest="page", default=1)
	parser.add_argument("-o", "--outfile", help="output filename", metavar="FILENAME", dest="outfile")
	parser.add_argument("-v", "--verbose", help="verbosity", dest="verbose", action="store_true")
	args = parser.parse_args()
	if args.verbose:
		print(banner)
	while True:
		try:
			if args.verbose:
				logging.basicConfig(format=f"{white}%(message)s{reset}",level=logging.DEBUG)
			TDsE(args).on_connection()
			page = input(f"\n{white}Next page ({green}page number{white}) -->>  ")
			
		except KeyboardInterrupt:
			if args.verbose:
				exit(f"{white}* Process interrupted ({red}Ctrl{white}+{red}C{white}).{reset}")
			exit()
		
		except Exception as e:
			if args.verbose:
				print(f"{white}* Error: {red}{e}{reset}")
				print("{white}* Reconnecting ({green}{args.query}{white})...{reset}")
